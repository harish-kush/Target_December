
class Solution {
public:
    int countSwaps(vector<int>& values){
        int swaps = 0;
        unordered_map<int,int>mp;
        vector<int>sorted = values;
        sort(sorted.begin(),sorted.end());
        for(int i=0;i<values.size();i++) mp[values[i]]=i;
        
        for(int i=0;i<values.size();i++){
            if(sorted[i]!=values[i]){
                swaps++;
                int existingPos = mp[sorted[i]];
                mp[values[i]] = existingPos;
                mp[sorted[i]] = i;
                swap(values[i],values[existingPos]);
            }
        }
        return swaps;
    }
    int minimumOperations(TreeNode* root) {
        queue<TreeNode*>q;
        q.push(root);
        int swaps = 0;
        while(!q.empty()){
            int n = q.size();
            vector<int>values(n);
            for(int i=0;i<n;i++){
                TreeNode* curr = q.front();
                q.pop();
                values[i] = curr->val;
                if(curr->left) q.push(curr->left);
                if(curr->right) q.push(curr->right);
            }
            swaps+=countSwaps(values);
        }
        return swaps;
    }
};
